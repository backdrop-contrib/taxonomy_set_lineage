<?php
/**
 * @file
 * Automatically selects parent terms when saving content assigned to a child
 * term.
 */

/**
 * Implements hook_config_info().
 */
function taxonomy_set_lineage_config_info() {
  return array(
    'taxonomy_set_lineage.settings' => array(
      'label' => t('Taxonomy Set Lineage settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function taxonomy_set_lineage_menu() {
  return array(
    'admin/structure/taxonomy/taxonomy_set_lineage' => array(
      'title' => 'Taxonomy Set Lineage',
      'description' => 'Select which vocabularies to set lineage for.',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('taxonomy_set_lineage_config_form'),
      'access arguments' => array('administer taxonomy'),
      'file' => 'taxonomy_set_lineage.admin.inc',
      'weight' => 10,
      'type' => MENU_LOCAL_TASK,
    ),
  );
}

/**
 * Implements hook_entity_presave().
 *
 * Sets parent term(s) when an entity assigned to a child term is saved.
 */
function taxonomy_set_lineage_entity_presave($entity, $type) {
  // Get selected vocabularies.
  $vocabularies = config_get('taxonomy_set_lineage.settings', 'vocabularies');

  if (!empty($vocabularies)) {
    // Get any Taxonomy Term Reference fields in the entity.
    list(, , $bundle) = entity_extract_ids($type, $entity);
    foreach (field_info_instances($type, $bundle) as $instance) {
      $field = field_info_field($instance['field_name']);
      if ($field['type'] == 'taxonomy_term_reference') {
        // If the field references one of the selected vocabularies, set the
        // parent terms for the field.
        if (in_array($field['settings']['allowed_values'][0]['vocabulary'], $vocabularies)) {
          _taxonomy_set_lineage_activate_parents($entity, $field['field_name']);
        }
      }
    }
  }
}

/**
 * Activates all parent terms of any changed terms.
 *
 * For all languages that are set on this vocabulary, we check to see if they
 * are changed from the original entity (i.e. were they just edited?). If so,
 * we pull down their terms and save the lineage (all parent terms) on them.
 * Only changing the language which was just edited follows the principle of
 * least surprise, and prevents us from having to do heuristics about the
 * Backdrop translation context.
 *
 * Because this module works on one field at a time, and only fields + languages
 * that have changed at save time, if you change the taxonomy hierarchy and save
 * a node, without changing which terms are selected, this module will do
 * nothing.
 *
 * @param object $entity
 *   The entity being saved.
 * @param string $field
 *   The machine name of the field we want to manipulate.
 */
function _taxonomy_set_lineage_activate_parents($entity, $field) {
  // Is there something to do?
  if (isset($entity->{$field}) && is_array($entity->{$field})) {
    foreach ($entity->{$field} as $lang_code => $language) {
      // Two loops to check for changes. First the new state.
      $tidsnew = array();
      foreach ($language as $term) {
        $tidsnew[] = isset($term['tid']) ? $term['tid'] : NULL;
      }
      // Now the old version of the entity.
      $tidsold = array();
      if (isset($entity->original->{$field}[$lang_code])) {
        foreach ($entity->original->{$field}[$lang_code] as $term) {
          $tidsold[] = isset($term['tid']) ? $term['tid'] : NULL;
        }
      }
      // Are there changes?
      asort($tidsnew);
      asort($tidsold);
      if (count(array_diff($tidsnew, $tidsold)) > 0 || count(array_diff($tidsold, $tidsnew)) > 0) {
        // This field and language have changed tids, we need to select parents.
        foreach ($language as $term) {
          // Get full ancestry of term... carefull, it includes our term also.
          $parent_term_objects = taxonomy_term_load_parents_all($term['tid']);
          if (count($parent_term_objects) > 1) {
            foreach ($parent_term_objects as $parent) {
              // Filter out ourselves, terms added as parents of other terms and
              // terms already selected during save ($tidsnew).
              if ($term['tid'] !== $parent->tid && !in_array($parent->tid, $tidsnew)) {
                $entity->{$field}[$lang_code][] = array('tid' => $parent->tid);
                $tidsnew[] = $parent->tid;
              }
            }
          }
        }
      }
    }
  }
}
